//Timer 버전

package GamePanel;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.*;
import javax.swing.*;
import javax.swing.Timer;
/**키를 지속적으로 누르는 경우 첫 키 이벤트가 발생한 후에 잠시 지연되는 문제를 해결하기 위해
 * Timer를 사용한 예이다.
 * 프로그램을 실행한 후에 A, D키를 누르면 화면에 출력된 검은 사각형이 좌우로 회전하는 내용이다
 */
public class main extends JPanel
{
    BufferedImage bImg;
    double speed=1;
    static int x = 200, y = 200;
     
    public main()
    {
        super();
        setBounds(0,0,400,400);
        setLayout(null);
        setFocusable(true);
        requestFocus();
        addKeyListener(new KeyHandler());
         
        bImg = new BufferedImage(100,20,BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = bImg.getGraphics();
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 100, 20);
    }
 
    @Override
    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);
		g.setColor(Color.black); 
		g.fillOval(x, y, 40, 40); 
    }
 
    public static void main(String args[])
    {
    //개발자가 상속하여 새로 정의한 콤포넌트로부터 이벤트 핸들러가 제대로 작동하려면
    //모든 코드는 EDT(Event Dispatched Thread) 안에서 실행되어야 한다
        EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
                frame.setContentPane(new main());
                frame.setBounds(100,100,400,300);
                frame.setVisible(true);
            }
        });
    }
 
    public class KeyHandler implements KeyListener{
    	 
        /**
        * keyPressed()에서 발생한 키코드를 아래의 HashSet에 저장하면 타이머 이벤트 핸들러에서
        * 키코드를 확인하여 화면을 갱신하는 코드를 실행한다
        * 여기서 컬렉션 중에서 Set을 선택한 이유는 키코드가 중복되어 저장하는 것을 막고 키를 뗄 때
        * HashSet에서 해당 키코드를 한개만 제거해주면 즉시 이벤트 효과가 제거되므로 이벤트에 즉시 반응하는 효과를 낼 수 있다
        */
        HashSet<Integer> pressedKeys = new HashSet<Integer>();
        Timer timer;
 
        public KeyHandler()
        {
            timer = new Timer(50, new ActionListener(){ // 50ms마다 액션 이벤트 발생
                @Override
                public void actionPerformed(ActionEvent arg0) // 50ms마다 발생한 액션 이벤트 처리
                {  
                    if(!pressedKeys.isEmpty()){
                        Iterator<Integer> i = pressedKeys.iterator();
                        int n = 0;
                        while(i.hasNext()){
                            n = i.next();
                            if (n==KeyEvent.VK_LEFT)		{x-=20*speed;} 
                            else if(n==KeyEvent.VK_RIGHT)	{x+= 20*speed;}
                            else if(n==KeyEvent.VK_DOWN)	{y+= 20*speed;}
                            else if(n==KeyEvent.VK_UP)		{y-= 20*speed;}  
                            repaint();
                        }
                    }else {
                        timer.stop();
                    }
                }
            });
        }

        @Override
        public void keyPressed(KeyEvent keyEvent){
            //발생한 키코드를 HsshSet에 저장한다
            int keyCode = keyEvent.getKeyCode();
            pressedKeys.add(keyCode);
            if(!timer.isRunning()) timer.start();
        }
        @Override
        public void keyReleased(KeyEvent keyEvent){
            //HashSet에서 키코드를 제거한다
            int keyCode = keyEvent.getKeyCode();
            pressedKeys.remove(keyCode);
        }
        @Override
        public void keyTyped(KeyEvent keyEvent){}
    }
}
